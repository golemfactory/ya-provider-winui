name:  Release
on:
  push:
    tags:
      - v*
      - pre-rel-*
jobs:
  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/github-script@v3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let buildNo = context.runNumber;
            let versionName = tag.replace(/^pre-rel-/,'');
            try {
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
            }
            catch(e) {
              let body = [`Golem Miner ${versionName}`].join("\n");

              let release =  await github.request("POST /repos/:owner/:repo/releases", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                data: {
                  tag_name: tag,
                  prerelease: true,
                  body: body,
                  name: `${versionName} #${buildNo}`
                }
              });
              console.log(release.data.upload_url);
            }
  build:
    strategy:
      matrix:
        targetplatform: [x64]

    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            console.log(release.data.upload_url);
            return release.data.upload_url

      - name: Download Dependencies
        shell: powershell
        run: |
          cd GolemUISetup
          .\prepare.ps1

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: NuGet
        run: nuget restore

      - name: Restore obj folder
        run: msbuild -t:restore /p:Platform=x64 /p:Configuration=Release

      - name: Build the Windows Application
        run: msbuild /p:Configuration=Release /p:Platform=x64

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: GolemUISetup\bin\Release\GolemUISetup.msi
          asset_name: GolemUISetup.msi
          asset_content_type: application/octet-stream

